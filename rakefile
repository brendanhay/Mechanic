#!/bin/ruby

require 'rake'
require 'rake/clean'

# Configuration
NODE = "mechanicserver"
MODULE = "mechanic"
FUN = "start"
TEST_MODULE = "mechanic_test"
INCLUDE = "include"

TYPER_DIR = 'src/typer_ann'

ERLC_FLAGS = "-I#{INCLUDE} +warn_unused_vars +warn_unused_import"

SRC = FileList['src/*.erl']
OBJ = SRC.pathmap("%{src,ebin}X.beam")

CLEAN.include(['**/*.dump'])
CLOBBER.include(['**/*.beam'])

directory 'ebin'
directory TYPER_DIR

task :default => [:clobber, :compile, :run]

rule ".beam" =>  ["%{ebin,src}X.erl"] do |t|
  sh "erlc -pa ebin -W #{ERLC_FLAGS} -o ebin #{t.source}"
end

desc "Compile all"
task :compile => ['ebin'] + OBJ do
  sh("cp -f src/*.app ebin/")
end

desc "Open up a shell"
task :shell => [:compile] do
  sh("erl -sname #{START} -pa #{PWD}/ebin")
end

desc "Open up a shell and run #{MODULE}:#{FUN}()" 
task :run => [:compile] do
  sh("erl -pa ebin -s #{MODULE} #{FUN}")
end

desc "Create typer annotations"
task :typer do
  # Touch the annotation files to prevent
  # the filenotfound bug in typer
  for file in SRC.ext('.ann.erl')
    path = file.pathmap("%f")
    sh("touch #{TYPER_DIR}/#{path}")
  end
  sh("typer --annotate src/*.erl")
end

desc "Runs dialyzer"
task :dialyzer do
#  sh("dialyzer --src -c src -I #{INCLUDE} -Wunmatched_returns -Wunderspecs -Woverspecs -Werror_handling -Wspecdiffs")
  sh("dialyzer --src -c src -I #{INCLUDE} -Wunmatched_returns -Werror_handling")
end

desc "Run Unit Tests" 
task :test do
  sh("erl -noshell -s #{TEST_MODULE} test -s init stop")
end

desc "Generate Documentation"
task :doc do
  sh("cd doc && erl -noshell -run edoc files ../#{SRC.join(" ../")} -run init stop")
end


